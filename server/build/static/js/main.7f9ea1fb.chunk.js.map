{"version":3,"sources":["components/LoginForm.tsx","http/index.ts","services/UserService.ts","App.tsx","services/AuthService.ts","store/store.ts","index.tsx"],"names":["observer","useState","email","setEmail","password","setPassword","store","useContext","Context","onChange","e","target","value","type","placeholder","onClick","login","registration","API_URL","$api","axios","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","localStorage","getItem","response","error","originalRequest","status","_isRetry","get","setItem","data","accessToken","console","log","UserService","users","setUsers","getUsers","fetchUsers","useEffect","checkAuth","isLoading","isAuth","user","logout","map","AuthService","post","Store","makeAutoObservable","this","bool","setAuth","setUser","message","removeItem","setLoading","createContext","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.7f9ea1fb.chunk.js","sourcesContent":["import React, { FC, useContext, useState } from \"react\";\nimport { Context } from \"../index\";\nimport { observer } from \"mobx-react-lite\";\n\nconst LoginForm: FC = () => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const { store } = useContext(Context);\n\n  return (\n    <div>\n      <input\n        onChange={(e) => setEmail(e.target.value)}\n        value={email}\n        type=\"text\"\n        placeholder=\"Email\"\n      />\n      <input\n        onChange={(e) => setPassword(e.target.value)}\n        value={password}\n        type=\"password\"\n        placeholder=\"Пароль\"\n      />\n      <button onClick={() => store.login(email, password)}>Логин</button>\n      <button onClick={() => store.registration(email, password)}>\n        Регистрация\n      </button>\n    </div>\n  );\n};\n\nexport default observer(LoginForm);\n","import axios from \"axios\";\nimport { AuthResponse } from \"../models/response/AuthResponse\";\n\nexport const API_URL = `http://localhost:3001/api`;\n\nconst $api = axios.create({\n  withCredentials: true,\n  baseURL: API_URL,\n});\n\n$api.interceptors.request.use((config) => {\n  config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\n  return config;\n});\n\n$api.interceptors.response.use(\n  (config) => {\n    return config;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    if (\n      error.response.status == 401 &&\n      error.config &&\n      !error.config._isRetry\n    ) {\n      originalRequest._isRetry = true;\n      try {\n        const response = await axios.get<AuthResponse>(`${API_URL}/refresh`, {\n          withCredentials: true,\n        });\n        localStorage.setItem(\"token\", response.data.accessToken);\n        return $api.request(originalRequest);\n      } catch (e) {\n        console.log(\"НЕ АВТОРИЗОВАН\");\n      }\n    }\n    throw error;\n  }\n);\n\nexport default $api;\n","import { AxiosResponse } from \"axios\";\nimport $api from \"../http\";\nimport { IUser } from \"../models/IUser\";\n\nexport default class UserService {\n  static fetchUsers(): Promise<AxiosResponse<IUser[]>> {\n    return $api.get<IUser[]>(\"/users\");\n  }\n}\n","import React, { FC, useEffect, useContext, useState } from \"react\";\nimport LoginForm from \"./components/LoginForm\";\nimport { Context } from \"./index\";\nimport { IUser } from \"./models/IUser\";\nimport { observer } from \"mobx-react-lite\";\nimport UserService from \"./services/UserService\";\n\nconst App: FC = () => {\n  const { store } = useContext(Context);\n  const [users, setUsers] = useState<IUser[]>([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"token\")) {\n      store.checkAuth();\n    }\n  }, []);\n\n  async function getUsers() {\n    try {\n      const response = await UserService.fetchUsers();\n      setUsers(response.data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  if (store.isLoading) {\n    return <div>Загрузка...</div>;\n  }\n\n  if (!store.isAuth) {\n    return (\n      <div>\n        <LoginForm />\n        <button onClick={getUsers}>Получить пользователей</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1>\n        {store.isAuth\n          ? `Пользователь авторизован ${store.user.email}`\n          : \"АВТОРИЗУЙТЕСЬ\"}\n      </h1>\n      <button onClick={() => store.logout()}>Выйти</button>\n      <div>\n        <button onClick={getUsers}>Получить пользователей</button>\n      </div>\n      {users.map((user) => (\n        <div key={user.email}>{user.email}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default observer(App);\n","import $api from \"../http\";\nimport { AxiosResponse } from \"axios\";\nimport { AuthResponse } from \"../models/response/AuthResponse\";\n\nexport default class AuthService {\n  static async login(\n    email: string,\n    password: string\n  ): Promise<AxiosResponse<AuthResponse>> {\n    return $api.post<AuthResponse>(\"/login\", { email, password });\n  }\n\n  static async registration(\n    email: string,\n    password: string\n  ): Promise<AxiosResponse<AuthResponse>> {\n    return $api.post<AuthResponse>(\"/registration\", { email, password });\n  }\n\n  static async logout(): Promise<void> {\n    return $api.post(\"/logout\");\n  }\n}\n","import { IUser } from \"../models/IUser\";\nimport { makeAutoObservable } from \"mobx\";\nimport AuthService from \"../services/AuthService\";\nimport axios from \"axios\";\nimport { AuthResponse } from \"../models/response/AuthResponse\";\nimport { API_URL } from \"../http\";\n\nexport default class Store {\n  user = {} as IUser;\n  isAuth = false;\n  isLoading = false;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setAuth(bool: boolean) {\n    this.isAuth = bool;\n  }\n\n  setUser(user: IUser) {\n    this.user = user;\n  }\n\n  setLoading(bool: boolean) {\n    this.isLoading = bool;\n  }\n\n  async login(email: string, password: string) {\n    try {\n      const response = await AuthService.login(email, password);\n      console.log(response);\n      localStorage.setItem(\"token\", response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n    } catch (error: any) {\n      console.log(error.response?.data?.message);\n    }\n  }\n\n  async registration(email: string, password: string) {\n    try {\n      const response = await AuthService.registration(email, password);\n      localStorage.setItem(\"token\", response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n    } catch (e) {\n      //@ts-ignore\n      console.log(e.response?.data?.message);\n    }\n  }\n\n  async logout() {\n    try {\n      const response = await AuthService.logout();\n      localStorage.removeItem(\"token\");\n      this.setAuth(false);\n      this.setUser({} as IUser);\n    } catch (e) {\n      //@ts-ignore\n      console.log(e.response?.data?.message);\n    }\n  }\n\n  async checkAuth() {\n    this.setLoading(true);\n    try {\n      const response = await axios.get<AuthResponse>(`${API_URL}/refresh`, {\n        withCredentials: true,\n      });\n      console.log(response);\n      localStorage.setItem(\"token\", response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n    } catch (e) {\n      //@ts-ignore\n      console.log(e.response?.data?.message);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n}\n","import React, { createContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport Store from \"./store/store\";\n\ninterface State {\n  store: Store;\n}\n\nexport const store = new Store();\n\nexport const Context = createContext<State>({\n  store,\n});\n\nReactDOM.render(\n  <Context.Provider\n    value={{\n      store,\n    }}\n  >\n    <App />\n  </Context.Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}